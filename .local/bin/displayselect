#!/bin/sh

# A UI for detecting and selecting all displays
# Dependencies: xrandr, dmenu, nitrogen, dunst
# TODO: add dpi settings for multiscreen case

twoscreen() { # If multi-monitor is selected and there are two screens.

    mirror=$(printf "no\\nyes" | dmenu -i -p "Mirror displays?")
    # Mirror displays using native resolution of external display and a scaled
    # version for the internal display
    if [ "$mirror" = "yes" ]; then
        external=$(echo "$screens" | dmenu -i -p "Optimize resolution for:")
        internal=$(echo "$screens" | grep -v "$external")

        res_external=$(xrandr --query | sed -n "/^$external/,/\+/p" | \
            tail -n 1 | awk '{print $1}')
        res_internal=$(xrandr --query | sed -n "/^$internal/,/\+/p" | \
            tail -n 1 | awk '{print $1}')

        res_ext_x=$(echo "$res_external" | sed 's/x.*//')
        res_ext_y=$(echo "$res_external" | sed 's/.*x//')
        res_int_x=$(echo "$res_internal" | sed 's/x.*//')
        res_int_y=$(echo "$res_internal" | sed 's/.*x//')

        scale_x=$(echo "$res_ext_x / $res_int_x" | bc -l)
        scale_y=$(echo "$res_ext_y / $res_int_y" | bc -l)

        xrandr --output "$external" --auto --scale 1.0x1.0 \
            --output "$internal" --auto --same-as "$external" \
            --scale "$scale_x"x"$scale_y"
    else
         primary=$(echo "$screens" | dmenu -i -p "Select primary display:")
         secondary=$(echo "$screens" | grep -v "$primary")
         direction=$(printf "left\\nright" | dmenu -i -p "What side of $primary should $secondary be on?")
         xrandr --output "$primary" --auto --scale 1.0x1.0 --output "$secondary" --"$direction"-of "$primary" --auto --scale 1.0x1.0
    fi
}

morescreen() { # If multi-montor is selected and there are more than two screens.
    primary=$(echo "$screens" | dmenu -i -p "Select primary display:")
    secondary=$(echo "$screens" | grep -v "$primary" | dmenu -i -p "Select secondary display:")
    direction=$(printf "left\\nright" | dmenu -i -p "What side of $primary should $secondary be on?")
    tertiary=$(echo "$screens" | grep -v "$primary" | grep -v "$secondary" | dmenu -i -p "Select third display:")
    xrandr --output "$primary" --auto --output "$secondary" --"$direction"-of "$primary" --auto --output "$tertiary" --"$(printf "left\\nright" | grep -v "$direction")"-of "$primary" --auto
}

multimon() { # Multi-monitor handler.
    case "$(echo "$screens" | wc -l)" in
        2) twoscreen ;;
        *) morescreen ;;
    esac ;}

onescreen() { # If only one output available or chosen.
    xrandr --output "$1" --auto --scale 1.0x1.0 $(echo "$allposs" | grep -v "\b$1" | awk '{print "--output", $1, "--off"}' | paste -sd ' ' -)

	updatedpi
    }

updatedi() { # Manually update the DPI
	current_dpi=$(xrdb -query | awk '/Xft.dpi/ {print $2}')
    dpi=$(echo "96\\n144\\n192" | dmenu -i -p "Select DPI")
    if [ -n "${dpi}" ] && ["$current_dpi" != $dpi]; then
        echo "Xft.dpi: $dpi" | xrdb -override -

        # Restart apps which use gnome settings
        dpi_xsd=$(echo "${dpi}*1024" | bc)
        sed -i -E "/DPI/s/[0-9]+/$dpi_xsd/" $XDG_CONFIG_HOME/xsettingsd/xsettingsd.conf
        killall -HUP xsettingsd

        # Update st and dmenu font size
        pixel_size=$(echo "${dpi}/16+9" | bc)
        sed -i -E "/pixelsize/s/[0-9]+/${pixel_size}/" $XDG_CONFIG_HOME/st/config.h
        cd $XDG_CONFIG_HOME/st/ && sudo -A make clean install

        sed -i -E "/pixelsize/s/[0-9]+/${pixel_size}/" $XDG_CONFIG_HOME/dmenu/config.h
        cd $XDG_CONFIG_HOME/dmenu/ && sudo -A make clean install

		# Update xmobar font size
		pixel_size_xmobar=$(echo "${dpi}/16+6" | bc)
		sed -i -E "/pixelsize/s/[0-9]+/${pixel_size_xmobar}/" $XDG_CONFIG_HOME/xmobar/xmobarrc
    fi
    }

postrun() { # Stuff to run to clean up.
    nitrogen --restore &

    # Use computer's audio card
    activesink=$(pactl list sinks | awk '/Active Port/ {print $3}')
    pactl set-sink-port "alsa_output.pci-0000_00_1f.3.analog-stereo" "$activesink"
    
    # Disable screensaver
    xset -dpms
    
    # Restart xmonad
    /home/cimino/.local/bin/xmonad --restart
    
    # Restart dunst to ensure proper location on screen
    { killall dunst ; setsid -f dunst ;} >/dev/null 2>&1
    }

# Get all possible displays
allposs=$(xrandr -q | grep "connected")

# Get all connected screens.
screens=$(echo "$allposs" | awk '/ connected/ {print $1}')

# If there's only one screen
[ "$(echo "$screens" | wc -l)" -lt 2 ] &&
    { onescreen "$screens"; notify-send "Only one screen detected." "Using it in its optimal settings...";  exit ;}

# Get user choice including multi-monitor and manual selection:
chosen=$(printf "%s\\nmulti-monitor\\nmanual selection" "$screens" | dmenu -i -p "Select display arangement:") &&
case "$chosen" in
    "manual selection") arandr ; exit ;;
    "multi-monitor") multimon ;;
    *) onescreen "$chosen" ;;
esac

postrun
